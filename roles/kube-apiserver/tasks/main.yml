---
# tasks file for kube-apiserver
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-apiserver

- name: Create log directory
  file: 
    name: '{{ kubernetes.apiserver.log.logDir }}'
    state: directory
    mode: '0755'

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ca.kubernetes.location }}'
    owner: root
    group: root
  with_items:
    - '{{ca.kubernetes.location }}/ca.crt'
    - '{{ca.kubernetes.location }}/etcd/ca.crt'
    - '{{ca.kubernetes.location }}/apiserver-etcd-client.crt'
    - '{{ca.kubernetes.location }}/apiserver-etcd-client.key'
    - '{{ca.kubernetes.location }}/apiserver-kubelet-client.crt'
    - '{{ca.kubernetes.location }}/apiserver-kubelet-client.key'
    - '{{ca.kubernetes.location }}/sa.pub'
    - '{{ca.kubernetes.location }}/sa.crt'
    - '{{ca.kubernetes.location }}/apiserver.crt'
    - '{{ca.kubernetes.location }}/apiserver.key'
    - '{{ca.kubernetes.location }}/front-proxy-ca.crt'
    - '{{ca.kubernetes.location }}/front-proxy-client.crt'
    - '{{ca.kubernetes.location }}/front-proxy-client.key'
    - '{{ca.kubernetes.location }}/admin.crt'
    - '{{ca.kubernetes.location }}/admin.key'

# - name: Create yaml directory
#   file: 
#     name: /var/lib/kubernetes
#     state: directory
#     mode: '0755'

# - name: Install audit policy minimal
#   template: 
#     src: audit-policy-minimal.yaml.j2
#     dest: /var/lib/kubernetes/audit-policy-minimal.yaml

# - name: register encryption key
#   shell: head -c 32 /dev/urandom | base64
#   register: ENCRYPTION_KEY
#   run_once: true

# - name: Install encryption config
#   template: 
#     src: encryption-config.yaml.j2
#     dest: /var/lib/kubernetes/encryption-config.yaml

- name: Install systemd file
  template: 
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service

- name: Start the service
  systemd:
    name: kube-apiserver
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Wait ApiServer
  wait_for:
    port: 6443
    delay: 30
    state: started
    host: '{{ ansible_ssh_host }}'

- name: Health check
  uri: 
    url: https://{{ ansible_default_ipv4.address }}:6443/healthz
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 10
  delay: 4
  connection: local
  ignore_errors: True

# - name: Create auto-approve --- part.1
#   copy: 
#     src: '{{ item }}'
#     dest: '/etc/kubernetes/{{ item }}'
#   run_once: true
#   with_items:
#     - auto-approve-csrs-for-group.yml
#     - auto-approve-renewals-for-nodes.yml
#     - kubeadm-kubelet-bootstrap.yml

# - name: Create auto-approve --- part.2
#   command: 'kubectl apply -f /etc/kubernetes/{{ item }}'
#   run_once: true
#   with_items:
#     - auto-approve-csrs-for-group.yml
#     - auto-approve-renewals-for-nodes.yml
#     - kubeadm-kubelet-bootstrap.yml