---
# tasks file for kube-apiserver
# - name: Install the binary
#   copy: 
#     src: '{{ item }}'
#     dest: /usr/local/bin/
#     mode: 0755
#     owner: root
#     group: root
#   with_items:
#     - kube-apiserver
#   register: apiserver_pkg

- name: Set OS dependent variables
  include_vars: '{{ DOWNLOAD_WAY }}.yml'

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kube-apiserver
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
  register: apiserver_bin
  until: apiserver_bin is succeeded
  retries: 10

- name: Create log directory
  file: 
    name: '{{ kubernetes.apiserver.log.logDir }}'
    state: directory
    mode: '0755'

- name: Configuration logrotate
  template: 
    src: kube-apiserver.logrotate.j2
    dest: /etc/logrotate.d/kube-apiserver

- name: Create ssl directory
  file: 
    name: '{{ kubernetes.ssl.location }}'
    state: directory
    mode: '0755'

- name: Distribution certificate
  copy: 
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: '{{ item.mode }}'
  with_items:
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.crt', dest: '{{ kubernetes.ssl.location }}/etcd/ca.crt', mode: 644 }
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.key', dest: '{{ kubernetes.ssl.location }}/etcd/ca.key', mode: 600 }
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.crt', dest: '{{ kubernetes.ssl.location }}/ca.crt', mode: 644 }
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.key', dest: '{{ kubernetes.ssl.location }}/ca.key', mode: 600 }

# - name: Check kube-apiserver certificate expired(30 days)
#   shell: |
#     [ -f apiserver.crt ] && 
#     openssl x509 -in apiserver.crt -noout -text -checkend 2592000
#   register: apiserver_certificate_expired
#   ignore_errors: True
#   args:
#     chdir: '{{ kubernetes.ssl.location }}'
#     executable: /bin/bash
- name: Check kube-apiserver certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/apiserver.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: apiserver_certificate_expired

- name: Create kube-apiserver certificate
  shell: |
    openssl genrsa -out apiserver.key 2048 && \
    openssl req -new -key apiserver.key -subj "/CN=kube-apiserver/O=Kubernetes" -config openssl.cnf -out apiserver.csr && \
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_apiserver -extfile openssl.cnf -out apiserver.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: apiserver_certificate
  when: apiserver_certificate_expired.failed or openssl_conf.changed

# - name: Check front-proxy-client certificate expired(30 days)
#   shell: |
#     [ -f front-proxy-client.crt ] && 
#     openssl x509 -in front-proxy-client.crt -noout -text -checkend 2592000
#   register: front_proxy_client_certificate_expired
#   ignore_errors: True
#   args:
#     chdir: '{{ kubernetes.ssl.location }}'
#     executable: /bin/bash
- name: Check front-proxy-client certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/front-proxy-client.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: front_proxy_client_certificate_expired

- name: Create front-proxy-client certificate
  shell: |
    openssl genrsa -out front-proxy-client.key 2048 && \
    openssl req -new -key front-proxy-client.key -subj "/CN=front-proxy-client" -out front-proxy-client.csr && \
    openssl x509 -req -in front-proxy-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out front-proxy-client.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: front_proxy_client_certificate
  when: front_proxy_client_certificate_expired.failed or openssl_conf.changed

# - name: Check apiserver-kubelet-client certificate expired(30 days)
#   shell: |
#     [ -f apiserver-kubelet-client.crt ] && 
#     openssl x509 -in apiserver-kubelet-client.crt -noout -text -checkend 2592000
#   register: kubelet_client_certificate_expired
#   ignore_errors: True
#   args:
#     chdir: '{{ kubernetes.ssl.location }}'
#     executable: /bin/bash
- name: Check apiserver-kubelet-client certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/apiserver-kubelet-client.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: kubelet_client_certificate_expired
- name: Create apiserver-kubelet-client certificate
  shell: |
    openssl genrsa -out apiserver-kubelet-client.key 2048 && \
    openssl req -new -key apiserver-kubelet-client.key -subj "/CN=apiserver-kubelet-client/O=system:masters" -out apiserver-kubelet-client.csr && \
    openssl x509 -req -in apiserver-kubelet-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out apiserver-kubelet-client.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: kubelet_client_certificate
  when: kubelet_client_certificate_expired.failed or openssl_conf.changed

# - name: Check apiserver-etcd-client certificate expired(30 days)
#   shell: |
#     [ -f apiserver-etcd-client.crt ] && 
#     openssl x509 -in apiserver-etcd-client.crt -noout -text -checkend 2592000
#   register: apiserver_etcd_client_certificate_expired
#   ignore_errors: True
#   args:
#     chdir: '{{ kubernetes.ssl.location }}'
#     executable: /bin/bash
- name: Check apiserver-etcd-client certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/apiserver-etcd-client.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: apiserver_etcd_client_certificate_expired

- name: Create apiserver etcd client certificate
  shell: |
    openssl genrsa -out apiserver-etcd-client.key 2048 && \
    openssl req -new -key apiserver-etcd-client.key -subj "/CN=apiserver-etcd-client/O=system:masters" -out apiserver-etcd-client.csr && \
    openssl x509 -in apiserver-etcd-client.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out apiserver-etcd-client.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: apiserver_etcd_client_certificate
  when: apiserver_etcd_client_certificate_expired.failed or openssl_conf.changed

- name: Install encryption config
  template: 
    src: encryption-config.yaml.j2
    dest: /etc/kubernetes/encryption-config.yaml
    mode: '0644'

- name: Install audit policy
  template: 
    src: audit-policy-minimal.yaml.j2
    dest: /etc/kubernetes/audit-policy-minimal.yaml
    mode: '0644'
  register: audit_policy

- name: Install systemd file
  template: 
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  register: apiserver_systemd

- name: Start the service
  systemd:
    name: kube-apiserver
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: apiserver_service
  when: apiserver_bin.changed or apiserver_certificate.changed or front_proxy_client_certificate.changed or kubelet_client_certificate.changed or apiserver_etcd_client_certificate.changed or audit_policy.changed or apiserver_systemd.changed

- name: Waiting for the service
  wait_for:
    port: 6443
    delay: 30
    state: started
  when: apiserver_service.changed

- name: Health check
  uri: 
    url: 'https://{% if kubernetes.apiserver.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:6443/healthz'
    client_cert: '{{ kubernetes.ssl.location }}/admin.crt'
    client_key: '{{ kubernetes.ssl.location }}/admin.key'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  when: apiserver_service.changed