---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kube-apiserver
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: apiserver_pkg
  until: apiserver_pkg is succeeded
  retries: 10

- name: Create certificate directory
  file:
    name: /etc/kubernetes/pki
    state: directory

- name: Distribution certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/etcd/ca.crt",
        dest: "/etc/kubernetes/pki/etcd/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/etcd/ca.key",
        dest: "/etc/kubernetes/pki/etcd/ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/front-proxy-ca.crt",
        dest: "/etc/kubernetes/pki/front-proxy-ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/front-proxy-ca.key",
        dest: "/etc/kubernetes/pki/front-proxy-ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/sa.key",
        dest: "/etc/kubernetes/pki/sa.key",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/sa.pub",
        dest: "/etc/kubernetes/pki/sa.pub",
        mode: 600,
      }

# apiserver
- name: Generate kube-apiserver private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver.key
    size: 2048
    mode: 0600

- name: Generate kube-apiserver csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver.csr
    privatekey_path: /etc/kubernetes/pki/apiserver.key
    common_name: "kube-apiserver"
    organization_name: "Kubernetes"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
    subject_alt_name: 
      - "DNS:localhost"
      - "DNS:kubernetes"
      - "DNS:kubernetes.default"
      - "DNS:kubernetes.default.svc"
      - "DNS:kubernetes.default.svc.{{ networking.dnsDomain | default(cluster.local) | split('.') | first }}"
      - "DNS:kubernetes.default.svc.{{ networking.dnsDomain | default(cluster.local) }}"
      - "IP:127.0.0.1"
      - "IP:{{ networking.SvcIP }}"
      - "IP:{{ ha.vip }}"
      - "IP:{{ ansible_default_ipv4.address }}"
  notify: Clean kube-apiserver csr
 
- name: Generate kube-apiserver certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver.crt
    csr_path: /etc/kubernetes/pki/apiserver.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644

# front-proxy-client
- name: Generate front-proxy-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/front-proxy-client.key
    size: 2048
    mode: 0600

- name: Generate front-proxy-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/front-proxy-client.csr
    privatekey_path: /etc/kubernetes/pki/front-proxy-client.key
    common_name: front-proxy-client
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  notify: Clean front-proxy-client csr

- name: Generate front-proxy-client crt
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/front-proxy-client.crt
    csr_path: /etc/kubernetes/pki/front-proxy-client.csr
    ownca_path: /etc/kubernetes/pki/front-proxy-ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/front-proxy-ca.key
    provider: ownca
    mode: 0644

# apiserver kubelet client
- name: Generate apiserver-kubelet-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.key
    size: 2048
    mode: 0600

- name: Generate apiserver-kubelet-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.csr
    privatekey_path: /etc/kubernetes/pki/apiserver-kubelet-client.key
    common_name: "kube-apiserver-kubelet-client"
    organization_name: "system:masters"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  notify: Clean apiserver-kubelet-client csr

- name: Generate apiserver-kubelet-client certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.crt
    csr_path: /etc/kubernetes/pki/apiserver-kubelet-client.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644

- name: Generate apiserver-etcd-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver-etcd-client.key
    size: 2048
    mode: 0600

- name: Generate apiserver-etcd-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver-etcd-client.csr
    privatekey_path: /etc/kubernetes/pki/apiserver-etcd-client.key
    common_name: "apiserver-etcd-client"
    organization_name: "system:masters"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
  notify: Clean apiserver-etcd-client csr

- name: Generate apiserver-etcd-client certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver-etcd-client.crt
    csr_path: /etc/kubernetes/pki/apiserver-etcd-client.csr
    ownca_path: /etc/kubernetes/pki/etcd/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/etcd/ca.key
    provider: ownca
    mode: 0644

- name: Install encryption config
  template:
    src: encryption-config.yaml.j2
    dest: /etc/kubernetes/encryption-config.yaml
    mode: "0644"
  register: apiserver_encryption_config_cfg

- name: Install audit policy
  template:
    src: audit-policy-minimal.yaml.j2
    dest: /etc/kubernetes/audit-policy-minimal.yaml
    mode: "0644"
  register: apiserver_audit_policy_cfg

- name: Install admission control config
  template:
    src: admission-control-config.yaml.j2
    dest: /etc/kubernetes/admission-control-config.yaml
    mode: "0644"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1
  register: apiserver_admission_control_cfg

- name: Create admission control config plugins files
  ansible.builtin.file:
    path: "/etc/kubernetes/{{ item.path }}"
    state: touch
  with_items: "{{ apiServer.admissionControlConfigFile }}"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1

- name: Install admission control config plugins
  blockinfile:
    path: "/etc/kubernetes/{{ item.path }}"
    block: |
      {{ item.configuration | to_nice_yaml(indent=2) }}
  with_items: "{{ apiServer.admissionControlConfigFile }}"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1

- name: Configuration cloud provider
  template:
    src: cloud.conf.j2
    dest: /etc/kubernetes/cloud.conf
  when: cloudProvider is defined

- name: Install systemd file
  template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  register: apiserver_systemd

- name: Start the service
  systemd:
    name: kube-apiserver
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Waiting for the service
  wait_for:
    port: 6443
    delay: 30
    state: started

- name: Health check
  uri:
    url: 'https://{% if apiServer.bindAddress != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:6443/healthz'
    client_cert: "/etc/kubernetes/pki/admin.crt"
    client_key: "/etc/kubernetes/pki/admin.key"
    validate_certs: no
    return_content: yes
  register: this
  until: 
    - "'ok' in this.content"
    - this.status == 200
  retries: 120
  delay: 1

- name: Distribution renewals for nodes rbac file
  template:
    src: auto-approve-renewals-for-nodes.yaml.j2
    dest: /tmp/auto-approve-renewals-for-nodes.yaml

- name: Approve renewals for nodes rbac
  ansible.builtin.command:
    cmd: /usr/local/bin/kubectl apply -f /tmp/auto-approve-renewals-for-nodes.yaml
  run_once: true
  ignore_errors: True