---
# tasks file for kube-apiserver
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-apiserver

- name: Create log directory
  file: 
    name: '{{ kubernetes.apiserver.log.logDir }}'
    state: directory
    mode: '0755'

- name: Create ssl directory
  file: 
    name: '{{ kubernetes.ssl.location }}'
    state: directory
    mode: '0755'

- name: Distribution certificate
  copy: 
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
  with_items:
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.crt', "dest": '{{ kubernetes.ssl.location }}/etcd/ca.crt' }
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.key', "dest": '{{ kubernetes.ssl.location }}/etcd/ca.key' }
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.crt', "dest": '{{ kubernetes.ssl.location }}/ca.crt' }
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.key', "dest": '{{ kubernetes.ssl.location }}/ca.key' }

- name: Create kube-apiserver
  shell: |
    openssl genrsa -out apiserver.key 2048 && \
    openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -config openssl.cnf -out apiserver.csr && \
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_apiserver -extfile openssl.cnf -out apiserver.crt -days {{ kubernetes.ca.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Create front-proxy-client
  shell: |
    openssl genrsa -out front-proxy-client.key 2048 && \
    openssl req -new -key front-proxy-client.key -subj "/CN=front-proxy-client" -out front-proxy-client.csr && \
    openssl x509 -req -in front-proxy-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out front-proxy-client.crt -days {{ kubernetes.ca.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Create apiserver-kubelet-client
  shell: |
    openssl genrsa -out apiserver-kubelet-client.key 2048 && \
    openssl req -new -key apiserver-kubelet-client.key -subj "/CN=apiserver-kubelet-client/O=system:masters" -out apiserver-kubelet-client.csr && \
    openssl x509 -req -in apiserver-kubelet-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out apiserver-kubelet-client.crt -days {{ kubernetes.ca.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Create apiserver etcd client
  shell: |
    openssl genrsa -out apiserver-etcd-client.key 2048 && \
    openssl req -new -key apiserver-etcd-client.key -subj "/CN=apiserver-etcd-client/O=system:masters" -out apiserver-etcd-client.csr && \
    openssl x509 -in apiserver-etcd-client.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out apiserver-etcd-client.crt -days {{ kubernetes.ca.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Stat encryption config file
  stat: 
    path: /etc/kubernetes/encryption-config.yaml
  register: encryption_config_file

- name: Register encryption config
  shell: head -c 32 /dev/urandom | base64
  register: encryption_config
  run_once: true
  when: not encryption_config_file.stat.exists

- name: Install encryption config
  template: 
    src: encryption-config.yaml.j2
    dest: /etc/kubernetes/encryption-config.yaml
    mode: '0644'
  when: not encryption_config_file.stat.exists

- name: Install audit policy
  template: 
    src: audit-policy-minimal.yaml.j2
    dest: /etc/kubernetes/audit-policy-minimal.yaml
    mode: '0644'

- name: Install systemd file
  template: 
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service

- name: Start the service
  systemd:
    name: kube-apiserver
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Waiting for the service
  wait_for:
    port: 6443
    delay: 30
    state: started

- name: Health check
  uri: 
    url: 'https://{% if kubernetes.apiserver.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:6443/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  connection: local
