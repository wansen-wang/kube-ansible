---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download package
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kube-apiserver
    force: true
    mode: 0755
    owner: root
    group: root
    url_username: "{{ NEXUS_USERNAME | default('') }}"
    url_password: "{{ NEXUS_PASSWORD | default('') }}"
    timeout: 3
  register: apiserver_pkg
  until: apiserver_pkg is succeeded
  retries: 15
  environment: "{{ proxy_env | default({'http_proxy': '', 'https_proxy': '', 'no_proxy': ''}) }}"

- name: Create certificate directory
  ansible.builtin.file:
    name: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/kubernetes/pki
    - /etc/kubernetes/pki/etcd

- name: Distribution certificate by local
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/etcd/ca.crt",
        dest: "/etc/kubernetes/pki/etcd/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/etcd/ca.key",
        dest: "/etc/kubernetes/pki/etcd/ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/front-proxy-ca.crt",
        dest: "/etc/kubernetes/pki/front-proxy-ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/front-proxy-ca.key",
        dest: "/etc/kubernetes/pki/front-proxy-ca.key",
        mode: 600,
      }
    - {
        src: "/etc/ssl/kubernetes/sa.key",
        dest: "/etc/kubernetes/pki/sa.key",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/sa.pub",
        dest: "/etc/kubernetes/pki/sa.pub",
        mode: 600,
      }
  when: not PKI_URL is defined

- name: Distribution CA certificate by pki server
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    checksum: "{{ item.checksum }}"
    owner: root
    group: root
    timeout: 3
  retries: 3
  with_items:
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/etcd.crt",
        dest: "/etc/kubernetes/pki/etcd/ca.crt",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/etcd.crt.sha256sum",
        mode: 644
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/etcd.key",
        dest: "/etc/kubernetes/pki/etcd/ca.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/etcd.key.sha256sum",
        mode: 600
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt.sha256sum",
        mode: 644,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key.sha256sum",
        mode: 600,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/front-proxy-ca.crt",
        dest: "/etc/kubernetes/pki/front-proxy-ca.crt",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/front-proxy-ca.crt.sha256sum",
        mode: 644,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/front-proxy-ca.key",
        dest: "/etc/kubernetes/pki/front-proxy-ca.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/front-proxy-ca.key.sha256sum",
        mode: 600,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/sa.key",
        dest: "/etc/kubernetes/pki/sa.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/sa.key.sha256sum",
        mode: 644,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/sa.pub",
        dest: "/etc/kubernetes/pki/sa.pub",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/sa.pub.sha256sum",
        mode: 600,
      }
  when: PKI_URL is defined

# apiserver
- name: Generate kube-apiserver private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver.key
    size: 2048
    mode: 0600
  register: apiserver_tls_apiserver_key

- name: Generate kube-apiserver csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver.csr
    privatekey_path: /etc/kubernetes/pki/apiserver.key
    common_name: "kube-apiserver"
    organization_name: "Kubernetes"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
    subject_alt_name: "{{ item.value | union(apiServer.certSANs | default(['DNS:*.kubernetes.local'])) | unique }}"
  with_dict:
    subject_alt_name:
      - "DNS:localhost"
      - "DNS:kubernetes"
      - "DNS:kubernetes.default"
      - "DNS:kubernetes.default.svc"
      - "DNS:kubernetes.default.svc.{{ networking.dnsDomain | default('cluster.local') | split('.') | first }}"
      - "DNS:kubernetes.default.svc.{{ networking.dnsDomain | default('cluster.local') }}"
      - "{% if ha is defined %}IP:{{ ha.vip }}{% else %}DNS:localhost{% endif %}"
      - "IP:127.0.0.1"
      - "IP:0:0:0:0:0:0:0:1"
      - "IP:::1"
      - "IP:{{ networking.serviceSubnet.split(',')[0] | default('10.96.0.0/12') | ansible.netcommon.next_nth_usable(1) }}"
      - "IP:{{ networking.serviceSubnet.split(',')[1] | default('2001:db8:42:1::/112') | ansible.netcommon.next_nth_usable(1) }}"
      - "IP:{{ ansible_default_ipv4.address }}"
      - "{% if ansible_default_ipv6.address is defined %}IP:{{ ansible_default_ipv6.address }}{% else %}IP:::1{% endif %}"
  changed_when: True
  notify: Clean kube-apiserver csr

- name: Generate kube-apiserver certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver.crt
    csr_path: /etc/kubernetes/pki/apiserver.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644
  register: apiserver_tls_apiserver_crt

# front-proxy-client
- name: Generate front-proxy-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/front-proxy-client.key
    size: 2048
    mode: 0600
  register: apiserver_tls_frontproxyclient_key

- name: Generate front-proxy-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/front-proxy-client.csr
    privatekey_path: /etc/kubernetes/pki/front-proxy-client.key
    common_name: front-proxy-client
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  changed_when: True
  notify: Clean front-proxy-client csr

- name: Generate front-proxy-client crt
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/front-proxy-client.crt
    csr_path: /etc/kubernetes/pki/front-proxy-client.csr
    ownca_path: /etc/kubernetes/pki/front-proxy-ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/front-proxy-ca.key
    provider: ownca
    mode: 0644
  register: apiserver_tls_frontproxyclient_crt

# apiserver kubelet client
- name: Generate apiserver-kubelet-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.key
    size: 2048
    mode: 0600
  register: apiserver_tls_apiserverkubeletclient_key

- name: Generate apiserver-kubelet-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.csr
    privatekey_path: /etc/kubernetes/pki/apiserver-kubelet-client.key
    common_name: "kube-apiserver-kubelet-client"
    organization_name: "system:masters"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  changed_when: True
  notify: Clean apiserver-kubelet-client csr

- name: Generate apiserver-kubelet-client certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver-kubelet-client.crt
    csr_path: /etc/kubernetes/pki/apiserver-kubelet-client.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644
  register: apiserver_tls_apiserverkubeletclient_crt

- name: Generate apiserver-etcd-client private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/apiserver-etcd-client.key
    size: 2048
    mode: 0600
  register: apiserver_tls_apiserveretcdclient_key

- name: Generate apiserver-etcd-client csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/apiserver-etcd-client.csr
    privatekey_path: /etc/kubernetes/pki/apiserver-etcd-client.key
    common_name: "apiserver-etcd-client"
    organization_name: "system:masters"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  changed_when: True
  notify: Clean apiserver-etcd-client csr

- name: Generate apiserver-etcd-client certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/apiserver-etcd-client.crt
    csr_path: /etc/kubernetes/pki/apiserver-etcd-client.csr
    ownca_path: /etc/kubernetes/pki/etcd/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/etcd/ca.key
    provider: ownca
    mode: 0644
  register: apiserver_tls_apiserveretcdclient_crt

- name: Install encryption config
  ansible.builtin.template:
    src: encryption-config.yaml.j2
    dest: /etc/kubernetes/encryption-config.yaml
    mode: "0644"
  register: apiserver_encryption_config_cfg

- name: Install audit policy
  ansible.builtin.template:
    src: audit-policy-minimal.yaml.j2
    dest: /etc/kubernetes/audit-policy-minimal.yaml
    mode: "0644"
  register: apiserver_audit_policy_cfg

- name: Install admission control config
  ansible.builtin.template:
    src: admission-control-config.yaml.j2
    dest: /etc/kubernetes/admission-control-config.yaml
    mode: "0644"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1
  register: apiserver_admission_control_cfg

- name: Create admission control config plugins files
  ansible.builtin.file:
    path: "/etc/kubernetes/{{ item.path }}"
    state: touch
  with_items: "{{ apiServer.admissionControlConfigFile }}"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1

- name: Install admission control config plugins
  blockinfile:
    path: "/etc/kubernetes/{{ item.path }}"
    block: |
      {{ item.configuration | to_nice_yaml(indent=2) }}
  with_items: "{{ apiServer.admissionControlConfigFile }}"
  when:
    - apiServer.admissionControlConfigFile is defined
    - apiServer.admissionControlConfigFile | length >= 1

- name: Configuration cloud provider
  ansible.builtin.template:
    src: cloud.conf.j2
    dest: /etc/kubernetes/cloud.conf
  when: cloudProvider is defined
  register: apiserver_cloud_provider_cfg

- name: Install systemd file
  ansible.builtin.template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  register: apiserver_systemd_cfg

- name: Start the service
  ansible.builtin.systemd:
    name: kube-apiserver
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: apiserver_systemd
  when: apiserver_pkg.changed or apiserver_tls_apiserver_key.changed or apiserver_tls_apiserver_crt.changed or apiserver_tls_frontproxyclient_key.changed or apiserver_tls_frontproxyclient_crt.changed or apiserver_tls_apiserverkubeletclient_key.changed or apiserver_tls_apiserverkubeletclient_crt.changed or apiserver_tls_apiserveretcdclient_key.changed or apiserver_tls_apiserveretcdclient_crt.changed or apiserver_encryption_config_cfg.changed or apiserver_audit_policy_cfg.changed or apiserver_admission_control_cfg.changed or apiserver_cloud_provider_cfg.changed or apiserver_systemd_cfg.changed 

- name: Waiting for the service
  wait_for:
    host: "{{ inventory_hostname }}"
    port: 6443
    delay: 30
    state: started
  when: apiserver_systemd.changed

- name: Health check
  uri:
    url: "https://{{ inventory_hostname | ip_format }}:6443/healthz"
    client_cert: "/etc/kubernetes/pki/admin.crt"
    client_key: "/etc/kubernetes/pki/admin.key"
    validate_certs: no
    return_content: yes
  register: this
  until:
    - "'ok' in this.content"
    - this.status == 200
  retries: 60
  delay: 1
  when: apiserver_systemd.changed

- name: Distribution renewals for nodes rbac file
  ansible.builtin.template:
    src: auto-approve-renewals-for-nodes.yaml.j2
    dest: /tmp/auto-approve-renewals-for-nodes.yaml

- name: Approve renewals for nodes rbac
  ansible.builtin.command:
    cmd: /usr/local/bin/kubectl apply -f /tmp/auto-approve-renewals-for-nodes.yaml
  run_once: true
  ignore_errors: True
