---
# tasks file for kube-controller-manager
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-controller-manager

- name: Create log directory
  file: 
    name: '{{ kubernetes.controllerManager.log.logDir }}'
    state: directory
    mode: '0755'

- name: Create ssl directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ kubernetes.ssl.location }}'
    owner: root
    group: root
    mode: 0644
  with_items:
    - '/etc/ssl/{{ kubernetes.project }}/ca.crt'
    - '/etc/ssl/{{ kubernetes.project }}/ca.key'

- name: Create kube-controller-manager
  shell: |
    openssl genrsa -out kube-controller-manager.key 2048 && \
    openssl req -new -key kube-controller-manager.key -subj "/CN=system:kube-controller-manager" -out kube-controller-manager.csr && \
    openssl x509 -req -in kube-controller-manager.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out kube-controller-manager.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Create kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if kubernetes.ha is defined %}
      {% if inventory_hostname in groups['master'] %}
        {% if kubernetes.cloud.type == "local" and groups['master'] | length > 1 %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 8443 %}
        {% else %}
          {% if kubernetes.cloud.type == "local"  %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
          {% else %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 6443 %}
          {% endif %}
        {% endif %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% else %}
      {% if inventory_hostname in groups['master'] %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% endif %}

    /usr/local/bin/kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --embed-certs=true \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-credentials {{ item.KUBE_USER }} \
      --embed-certs=true \
      --client-certificate={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.key \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }} 
  with_items:
    - { KUBE_USER: 'system:kube-controller-manager', KUBE_CERT: "kube-controller-manager", KUBE_CONFIG: 'kube-controller-manager.kubeconfig' }

- name: Change file permissions
  file:
    path: /etc/kubernetes/kube-controller-manager.kubeconfig
    mode: '0644'

- name: Install systemd file
  template: 
    src: kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service

- name: Start the service
  systemd:
    name: kube-controller-manager
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Waiting for the service
  wait_for:
    port: 10252
    delay: 30
    state: started

- name: Health check
  uri: 
    url: 'http://{% if kubernetes.controllerManager.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10252/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  connection: local