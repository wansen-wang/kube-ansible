---
# tasks file for kube-scheduler
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-scheduler

- name: Create log directory
  file: 
    name: '{{ kubernetes.scheduler.log.logDir }}'
    state: directory
    mode: '0755'

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ca.kubernetes.location }}'
    owner: root
    group: root
  with_items:
    - '{{ca.kubernetes.location }}/ca.crt'
    - '{{ca.kubernetes.location }}/kube-scheduler.crt'
    - '{{ca.kubernetes.location }}/kube-scheduler.key'

- name: Create kubeconfig
  shell: |
    kubectl config set-cluster {{ kubernetes.name }} \
      --certificate-authority={{ ca.kubernetes.location }}/ca.crt \
      --server=https://{{ ansible_default_ipv4.address }}:6443 \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

     kubectl config set-credentials {{ item.KUBE_USER }} \
      --client-certificate={{ ca.kubernetes.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ ca.kubernetes.location }}/{{ item.KUBE_CERT }}.key \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

     kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name }} \
      --cluster={{ kubernetes.name }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

     kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'system:kube-scheduler', KUBE_CERT: "kube-scheduler", KUBE_CONFIG: 'scheduler.kubeconfig'}

- name: Install systemd file
  template: 
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service

- name: Start the service
  systemd:
    name: kube-scheduler
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Health check
  uri: 
    url: http://{{ ansible_default_ipv4.address }}:10251/healthz
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 10
  delay: 4
  connection: local
  ignore_errors: True