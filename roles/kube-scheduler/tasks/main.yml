---
# tasks file for kube-scheduler
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-scheduler
  register: kube_scheduler_bin

- name: Create log directory
  file: 
    name: '{{ kubernetes.scheduler.log.logDir }}'
    state: directory
    mode: '0755'

- name: Configuration logrotate
  template: 
    src: kube-scheduler.logrotate.j2
    dest: /etc/logrotate.d/kube-scheduler

- name: Create ssl directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ kubernetes.ssl.location }}'
    owner: root
    group: root
    mode: 0644
  with_items:
    - '/etc/ssl/{{ kubernetes.project }}/ca.crt'
    - '/etc/ssl/{{ kubernetes.project }}/ca.key'

- name: Check kube-scheduler certificate expired(30 days)
  shell: |
    [ -f kube-scheduler.crt ] && 
    openssl x509 -in kube-scheduler.crt -noout -text -checkend 2592000
  register: kube_scheduler_certificate_expired
  ignore_errors: True
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash

- name: Create kube-scheduler certificate
  shell: |
    openssl genrsa -out kube-scheduler.key 2048 && \
    openssl req -new -key kube-scheduler.key -subj "/CN=system:kube-scheduler/O=system:kube-scheduler" -out kube-scheduler.csr && \
    openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out kube-scheduler.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: kube_scheduler_certificate
  when: kube_scheduler_certificate_expired.rc != 0

- name: Create kubeconfig
  shell: |
    /usr/local/bin/kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --embed-certs=true \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server="https://{{ ansible_default_ipv4.address }}" \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-credentials {{ item.KUBE_USER }} \
      --embed-certs=true \
      --client-certificate={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.key \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'system:kube-scheduler', KUBE_CERT: "kube-scheduler", KUBE_CONFIG: 'kube-scheduler.kubeconfig'}
  register: kube_scheduler_kubeconfig
  when: kube_scheduler_certificate.changed

- name: Change file permissions
  file:
    path: /etc/kubernetes/kube-scheduler.kubeconfig
    mode: '0644'

- name: Install systemd file
  template: 
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
  register: kube_scheduler_systemd

- name: Start the service
  systemd:
    name: kube-scheduler
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: kube_scheduler_service
  when: kube_scheduler_bin.changed or kube_scheduler_certificate.changed or kube_scheduler_kubeconfig.changed or kube_scheduler_systemd.changed

- name: Waiting for the service
  wait_for:
    port: 10251
    delay: 30
    state: started
  when: kube_scheduler_service.changed

- name: Health check
  uri: 
    url: 'http://{% if kubernetes.scheduler.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10251/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 1
  connection: local
  when: kube_scheduler_service.changed