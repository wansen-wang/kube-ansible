---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kube-proxy
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: kube_proxy_pkg
  until: kube_proxy_pkg is succeeded
  retries: 10

- name: Create certificate directory
  file:
    name: /etc/kubernetes/pki
    state: directory

- name: Distribution certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        mode: 600,
      }

- name: Generate kube-proxy private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/kube-proxy.key
    size: 2048
    mode: 0600

- name: Generate kube-proxy csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/kube-proxy.csr
    privatekey_path: /etc/kubernetes/pki/kube-proxy.key
    common_name: "system:kube-proxy"
    organization_name: "system:node-proxier"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth

- name: Generate kube-proxy certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/kube-proxy.crt
    csr_path: /etc/kubernetes/pki/kube-proxy.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644

- name: Create kubeconfig
  template:
    src: kube-proxy.kubeconfig.j2
    dest: /etc/kubernetes/kube-proxy.kubeconfig
    mode: 0600

- name: Install config file
  template:
    src: kube-proxy.yaml.j2
    dest: /etc/kubernetes/kube-proxy.yaml

- name: Install systemd file
  template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service

- name: Start the service
  systemd:
    name: kube-proxy
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: kube_proxy_service

- name: Health check
  uri:
    url: 'http://{% if proxy.bindAddress != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10256/healthz'
    validate_certs: no
  register: this
  until: this.status == 200
  retries: 120
  delay: 1
