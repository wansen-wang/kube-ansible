---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kube-proxy
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME | default('') }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD | default('') }}"
    timeout: 3
  register: proxy_pkg
  until: proxy_pkg is succeeded
  retries: 10
  environment: "{{ proxy_env | default({'http_proxy': '', 'https_proxy': '', 'no_proxy': ''}) }}"

- name: Create certificate directory
  ansible.builtin.file:
    name: /etc/kubernetes/pki
    state: directory

- name: Distribution certificate by local
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        mode: 600,
      }
  when: not PKI_URL is defined

- name: Distribution certificate by pki server
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    checksum: "{{ item.checksum }}"
    owner: root
    group: root
    timeout: 3
  retries: 3
  with_items:
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt.sha256sum",
        mode: 644,
      }
    - {
        url: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key.sha256sum",
        mode: 600,
      }
  when: PKI_URL is defined

- name: Generate kube-proxy private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/kube-proxy.key
    size: 2048
    mode: 0600
  register: proxy_tls_key

- name: Generate kube-proxy csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/kube-proxy.csr
    privatekey_path: /etc/kubernetes/pki/kube-proxy.key
    common_name: "system:kube-proxy"
    organization_name: "system:node-proxier"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  changed_when: True
  notify: Clean kube-proxy csr

- name: Generate kube-proxy certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/kube-proxy.crt
    csr_path: /etc/kubernetes/pki/kube-proxy.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644
  register: proxy_tls_crt

- name: Create kubeconfig
  ansible.builtin.template:
    src: kube-proxy.kubeconfig.j2
    dest: /etc/kubernetes/kube-proxy.kubeconfig
    mode: 0644
  register: proxy_kubeconfig_cfg

- name: Install config file
  ansible.builtin.template:
    src: kube-proxy.yaml.j2
    dest: /etc/kubernetes/kube-proxy.yaml
  register: proxy_service_cfg

- name: Install systemd file
  ansible.builtin.template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service
  register: proxy_systemd_cfg

- name: Start the service
  ansible.builtin.systemd:
    name: kube-proxy
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: proxy_systemd
  when: proxy_pkg.changed or proxy_tls_key.changed or proxy_tls_crt.changed or proxy_service_cfg.changed or proxy_systemd_cfg.changed

- name: Waiting for the service
  wait_for:
    host: "{% if IP_STACK | default('ipv4') == 'ipv6' %}[{{ ansible_default_ipv6.address }}]{% else %}{{ ansible_default_ipv4.address }}{% endif %}"
    port: 10256
    delay: 30
    state: drained
  when: proxy_systemd.changed

- name: Health check
  uri:
    url: 'http://127.0.0.1:10256/healthz'
    validate_certs: no
  register: this
  until: this.status == 200
  retries: 120
  delay: 1
  when: proxy_systemd.changed