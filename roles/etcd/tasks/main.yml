---
# tasks file for etcd
- name: Add the group 'etcd'
  group:
    name: etcd
    state: present
    system: True

- name: Add the user 'etcd'
  user:
    name: etcd
    home: '{{ kubernetes.etcd.datadir }}'
    comment: etcd service account
    create_home: False
    shell: /sbin/nologin
    system: True
    group: etcd

# - name: Install the binary
#   copy: 
#     src: '{{ item }}'
#     dest: /usr/local/bin/
#     mode: 0755
#   with_items:
#     - etcd
#     - etcdctl

- name: Set OS dependent variables
  include_vars: '{{ DOWNLOAD_WAY }}.yml'

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: "/usr/local/src/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    mode: 0644
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
  register: result
  until: result is succeeded
  retries: 10
  when: etcd_pkg.failed

- name: Extract Etcd
  unarchive:
    src: "/usr/local/src/etcd-v{{ ETCD_VERSION }}-linux-amd64.tar.gz"
    dest: /usr/local/bin
    exclude:
      - Documentation
      - 'README*'
    extra_opts:
      - --strip-components=1
  register: etcd_pkg
  when: etcd_pkg.failed

- name: Create data directory
  file: 
    name: '{{ kubernetes.etcd.datadir }}'
    state: directory
    mode: 0700
    owner: etcd
    group: etcd

- name: Create certificate directory
  file: 
    name: '{{ kubernetes.ssl.location }}/etcd'
    state: directory
    owner: etcd
    group: etcd

- name: Distribution certificate
  copy: 
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0644
    owner: root
    group: root
  with_items:
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.crt', dest: '{{ kubernetes.ssl.location }}/etcd/ca.crt' }
    - { src: '/etc/ssl/{{ kubernetes.project }}/etcd/ca.key', dest: '{{ kubernetes.ssl.location }}/etcd/ca.key' }

- name: Check etcd server certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/etcd/server.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: etcd_server_certificate_expired

- name: Create etcd server certificate
  shell: |
    openssl genrsa -out etcd/server.key 2048 && \
    openssl req -new -key etcd/server.key -subj "/CN=etcd-server" -out etcd/server.csr && \
    openssl x509 -in etcd/server.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/server.crt -days {{ kubernetes.ssl.days | default(3652) }}
    chown etcd:etcd etcd/server.key etcd/server.csr etcd/server.crt
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: etcd_server_certificate
  when: etcd_server_certificate_expired.failed

- name: Check etcd peer certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/etcd/peer.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: etcd_peer_certificate_expired

- name: Create etcd peer certificate
  shell: |
    openssl genrsa -out etcd/peer.key 2048 && \
    openssl req -new -key etcd/peer.key -subj "/CN=etcd-peer" -out etcd/peer.csr && \
    openssl x509 -in etcd/peer.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/peer.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: etcd_peer_certificate
  when: etcd_peer_certificate_expired.failed

- name: Check etcd healthcheck certificate expired(30 days)
  openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/etcd/healthcheck-client.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: etcd_healthcheck_certificate_expired

- name: Create etcd healthcheck client
  shell: |
    openssl genrsa -out etcd/healthcheck-client.key 2048 && \
    openssl req -new -key etcd/healthcheck-client.key -subj "/CN=etcd-client" -out etcd/healthcheck-client.csr && \
    openssl x509 -in etcd/healthcheck-client.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/healthcheck-client.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  when: etcd_healthcheck_certificate_expired.failed

- name: Change file ownership, group and permissions
  file:
    path: '{{ item.src }}'
    owner: etcd
    group: etcd
    mode: '{{ item.mode }}'
  with_items:
    - { src: '{{ kubernetes.ssl.location }}/etcd/healthcheck-client.crt', mode: 644 }
    - { src: '{{ kubernetes.ssl.location }}/etcd/healthcheck-client.key', mode: 600 }
    - { src: '{{ kubernetes.ssl.location }}/etcd/peer.crt', mode: 644 }
    - { src: '{{ kubernetes.ssl.location }}/etcd/peer.key', mode: 600 }
    - { src: '{{ kubernetes.ssl.location }}/etcd/server.crt', mode: 644 }
    - { src: '{{ kubernetes.ssl.location }}/etcd/server.key', mode: 600 }

- name: Install systemd file
  template: 
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
  register: etcd_systemd

- name: Backup data
  shell: |
    NAME=$(date +%s)
    ETCDCTL_API=3 /usr/local/bin/etcdctl --command-timeout=3s --endpoints {{ ansible_default_ipv4.address }}:2379 --cacert {{ kubernetes.ssl.location }}/etcd/ca.crt --cert {{ kubernetes.ssl.location }}/etcd/server.crt --key {{ kubernetes.ssl.location }}/etcd/server.key snapshot save /tmp/kubernetes-etcd.${NAME}.db
  ignore_errors: True

- name: Start the service
  systemd:
    name: etcd
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: etcd_service
  when: etcd_bin.changed or etcd_server_certificate.changed or etcd_peer_certificate.changed or etcd_systemd.changed

- name: Wait for etcd
  wait_for:
    port: 2379
    delay: 15
    state: started
    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
  connection: local
  when: etcd_service.changed

- name: Install health check command
  template: 
    src: etcd-check.j2
    dest: /usr/local/bin/etcd-check
    mode: 755

- name: Install Backup command
  template: 
    src: etcd-backup.j2
    dest: /usr/local/bin/etcd-backup
    mode: 755

- name: Health check
  shell: |
    ETCDCTL_API=3 /usr/local/bin/etcdctl --endpoints {{ ansible_default_ipv4.address }}:2379 --cacert {{ kubernetes.ssl.location }}/etcd/ca.crt --cert {{ kubernetes.ssl.location }}/etcd/server.crt --key {{ kubernetes.ssl.location }}/etcd/server.key endpoint health
  when: etcd_service.changed

- name: Create backup kubernetes etcd data in cron
  cron:
    name: "backup kubernetes etcd data by kube-ansible"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/etcd-backup"