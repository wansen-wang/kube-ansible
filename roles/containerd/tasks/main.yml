---
# tasks file for containerd
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download RunC
  get_url:
    url: "{{ runc_download_url }}"
    dest: /usr/local/bin/runc
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: runc_pkg
  until: runc_pkg is succeeded
  retries: 10
  notify: Start Containerd

- name: Download Containerd
  get_url:
    url: "{{ containerd_download_url }}"
    dest: "/usr/local/src/containerd-{{ CONTAINERD_VERSION }}-{{ ansible_system | lower }}-{% if ansible_architecture == 'aarch64' %}arm64{% elif ansible_architecture == 'x86_64' %}amd64{% endif %}.tar.gz"
    mode: 0644
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: containerd_pkg
  until: containerd_pkg is succeeded
  retries: 10
  notify: Start Containerd

- name: Extract Containerd
  ansible.builtin.unarchive:
    src: "/usr/local/src/containerd-{{ CONTAINERD_VERSION }}-{{ ansible_system | lower }}-{% if ansible_architecture == 'aarch64' %}arm64{% elif ansible_architecture == 'x86_64' %}amd64{% endif %}.tar.gz"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes
    extra_opts:
      - --strip-components=1
  notify: Start Containerd

- name: Download Crictl
  get_url:
    url: "{{ crictl_download_url }}"
    dest: "/usr/local/src/crictl-v{{ CRICTL_VERSION }}-{{ ansible_system | lower }}-{% if ansible_architecture == 'aarch64' %}arm64{% elif ansible_architecture == 'x86_64' %}amd64{% endif %}.tar.gz"
    mode: 0644
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: crictl_pkg
  until: crictl_pkg is succeeded
  retries: 10
  notify: Start Containerd

- name: Extract Crictl
  ansible.builtin.unarchive:
    src: "/usr/local/src/crictl-v{{ CRICTL_VERSION }}-{{ ansible_system | lower }}-{% if ansible_architecture == 'aarch64' %}arm64{% elif ansible_architecture == 'x86_64' %}amd64{% endif %}.tar.gz"
    dest: /usr/local/bin
    mode: 0755
    owner: root
    group: root
    remote_src: yes

- name: Configuration Crictl
  ansible.builtin.template:
    src: crictl.yaml.j2
    dest: /etc/crictl.yaml

- name: Create Configuration directory
  ansible.builtin.file:
    name: /etc/containerd
    state: directory
    mode: "0755"

- name: Create a containerd primary partition
  community.general.filesystem:
    fstype: xfs
    dev: "{{ containerd.device }}"
    state: present
  when: containerd.device is defined

- name: Mount containerd root dir
  ansible.posix.mount:
    src: "{{ containerd.device }}"
    path: /var/lib/containerd
    fstype: xfs
    opts: defaults,pquota
    state: mounted
  when: containerd.device is defined

- name: Configuration Containerd
  ansible.builtin.template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
  notify: Start Containerd

- name: Install systemd file
  ansible.builtin.template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service
  notify: Start Containerd

- name: Install crictl completion
  ansible.builtin.copy:
    src: crictl.sh
    dest: /etc/bash_completion.d/crictl
    owner: root
    group: root
