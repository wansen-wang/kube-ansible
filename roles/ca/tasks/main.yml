---
# tasks file for ca
- name: Create certificate directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
  - '{{ ca.kubernetes.location }}'
  - '{{ ca.etcd.location }}'

# - name: Create certificate directory
#   file: 
#     name: ~/.rnd
#     state: touch

- name: Create openssl template
  template: 
    src: openssl.cnf.j2
    dest: '{{ ca.kubernetes.location }}/openssl.cnf'

- name: Check kubernetes ca certificate expired(30 days)
  shell: |
    [ -f /etc/kubernetes/pki/ca.crt ] && 
    openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -text -checkend 2592000
  register: kubernetes_ca_check
  ignore_errors: True

- name: Create kubernetes ca
  shell: |
    openssl genrsa -out ca.key 2048 && \
    openssl req -x509 -new -nodes -key ca.key -config openssl.cnf -subj "/CN=kubernetes-ca" -extensions v3_ca -out ca.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force

- name: Check etcd ca certificate expired(30 days)
  shell: |
    [ -f /etc/kubernetes/pki/etcd/ca.crt ] && 
    openssl x509 -in /etc/kubernetes/pki/etcd/ca.crt -noout -text -checkend 2592000
  register: etcd_ca_check
  ignore_errors: True

- name: Create etcd ca
  shell: |
    openssl genrsa -out {{ ca.etcd.location }}/ca.key 2048 && \
    openssl req -x509 -new -nodes -key {{ ca.etcd.location }}/ca.key -config openssl.cnf -subj "/CN=etcd-ca" -extensions v3_ca -out {{ ca.etcd.location }}/ca.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: etcd_ca_check.rc != 0 or force


- name: Check front-proxy ca certificate expired(30 days)
  shell: |
    [ -f /etc/kubernetes/pki/front-proxy-ca.crt ] && 
    openssl x509 -in /etc/kubernetes/pki/front-proxy-ca.crt -noout -text -checkend 2592000
  register: front_proxy_ca_check
  ignore_errors: True

- name: Create front-proxy-ca
  shell: |
    openssl genrsa -out front-proxy-ca.key 2048 && \
    openssl req -x509 -new -nodes -key front-proxy-ca.key -config openssl.cnf -subj "/CN=kubernetes-ca" -extensions v3_ca -out front-proxy-ca.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: front_proxy_ca_check.rc != 0 or force


- name: Create apiserver etcd client
  shell: |
    openssl genrsa -out apiserver-etcd-client.key 2048 && \
    openssl req -new -key apiserver-etcd-client.key -subj "/CN=apiserver-etcd-client/O=system:masters" -out apiserver-etcd-client.csr && \
    openssl x509 -in apiserver-etcd-client.csr -req -CA {{ ca.etcd.location }}/ca.crt -CAkey {{ ca.etcd.location }}/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out apiserver-etcd-client.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: etcd_ca_check.rc != 0 or force


- name: Create kube etcd
  shell: |
    openssl genrsa -out {{ ca.etcd.location }}/server.key 2048 && \
    openssl req -new -key {{ ca.etcd.location }}/server.key -subj "/CN=etcd-server" -out {{ ca.etcd.location }}/server.csr && \
    openssl x509 -in {{ ca.etcd.location }}/server.csr -req -CA {{ ca.etcd.location }}/ca.crt -CAkey {{ ca.etcd.location }}/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out {{ ca.etcd.location }}/server.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: etcd_ca_check.rc != 0 or force


- name: kube-etcd-peer
  shell: |
    openssl genrsa -out {{ ca.etcd.location }}/peer.key 2048 && \
    openssl req -new -key {{ ca.etcd.location }}/peer.key -subj "/CN=etcd-peer" -out {{ ca.etcd.location }}/peer.csr && \
    openssl x509 -in {{ ca.etcd.location }}/peer.csr -req -CA {{ ca.etcd.location }}/ca.crt -CAkey {{ ca.etcd.location }}/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out {{ ca.etcd.location }}/peer.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: etcd_ca_check.rc != 0 or force


- name: kube-etcd-healthcheck-client
  shell: |
    openssl genrsa -out {{ ca.etcd.location }}/healthcheck-client.key 2048 && \
    openssl req -new -key {{ ca.etcd.location }}/healthcheck-client.key -subj "/CN=etcd-client" -out {{ ca.etcd.location }}/healthcheck-client.csr && \
    openssl x509 -in {{ ca.etcd.location }}/healthcheck-client.csr -req -CA {{ ca.etcd.location }}/ca.crt -CAkey {{ ca.etcd.location }}/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out {{ ca.etcd.location }}/healthcheck-client.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: etcd_ca_check.rc != 0 or force


- name: kube-apiserver
  shell: |
    openssl genrsa -out apiserver.key 2048 && \
    openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -config openssl.cnf -out apiserver.csr && \
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_apiserver -extfile openssl.cnf -out apiserver.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force


- name: apiserver-kubelet-client
  shell: |
    openssl genrsa -out  apiserver-kubelet-client.key 2048 && \
    openssl req -new -key apiserver-kubelet-client.key -subj "/CN=apiserver-kubelet-client/O=system:masters" -out apiserver-kubelet-client.csr && \
    openssl x509 -req -in apiserver-kubelet-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out apiserver-kubelet-client.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force


- name: front-proxy-client
  shell: |
    openssl genrsa -out  front-proxy-client.key 2048 && \
    openssl req -new -key front-proxy-client.key -subj "/CN=front-proxy-client" -out front-proxy-client.csr && \
    openssl x509 -req -in front-proxy-client.csr -CA front-proxy-ca.crt -CAkey front-proxy-ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out front-proxy-client.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: front_proxy_ca_check.rc != 0 or force


- name: kube-scheduler
  shell: |
    openssl genrsa -out  kube-scheduler.key 2048 && \
    openssl req -new -key kube-scheduler.key -subj "/CN=system:kube-scheduler" -out kube-scheduler.csr && \
    openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out kube-scheduler.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force

- name: sa.pub sa.key
  shell: |
    openssl genrsa -out  sa.key 2048 && \
    openssl ecparam -name secp521r1 -genkey -noout -out sa.key && \
    openssl ec -in sa.key -outform PEM -pubout -out sa.pub && \
    openssl req -new -sha256 -key sa.key -subj "/CN=system:kube-controller-manager" -out sa.csr && \
    openssl x509 -req -in sa.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out sa.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force

- name: admin
  shell: |
    openssl genrsa -out  admin.key 2048 && \
    openssl req -new -key admin.key -subj "/CN=kubernetes-admin/O=system:masters" -out admin.csr && \
    openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out admin.crt -days {{ ca.days }}
  args:
    chdir: '{{ ca.kubernetes.location }}'
    executable: /bin/bash
  when: kubernetes_ca_check.rc != 0 or force