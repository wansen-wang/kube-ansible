---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download package
  get_url:
    url: "{{ download_url }}"
    checksum: "sha256:{{ checksum_url }}.sha256"
    dest: /usr/local/bin/kubectl
    force: true
    mode: 0755
    owner: root
    group: root
    url_username: "{{ NEXUS_USERNAME | default('') }}"
    url_password: "{{ NEXUS_PASSWORD | default('') }}"
    timeout: 3
  register: kubectl_pkg
  until: kubectl_pkg is succeeded
  retries: 15
  environment: "{{ proxy_env | default({'http_proxy': '', 'https_proxy': '', 'no_proxy': ''}) }}"

- name: Create certificate directory
  ansible.builtin.file:
    name: /etc/kubernetes/pki
    state: directory

- name: Distribution certificate by local
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }
    - {
        src: "/etc/ssl/kubernetes/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        mode: 600,
      }
  notify: Clean ca key
  when: not PKI_URL is defined

- name: Distribution certificate by pki server
  get_url:
    url: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    checksum: "{{ item.checksum }}"
    owner: root
    group: root
    timeout: 3
  retries: 3
  with_items:
    - {
        src: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.crt.sha256sum",
        mode: 644,
      }
    - {
        src: "{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key",
        dest: "/etc/kubernetes/pki/ca.key",
        checksum: "sha256:{{ PKI_URL }}/{{ PROJECT_NAME }}/{{ PROJECT_ENV }}/ca.key.sha256sum",
        mode: 600,
      }
  notify: Clean ca key
  when: PKI_URL is defined

- name: Generate kubectl private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/admin.key
    size: 2048
    mode: 0600
  notify: Clean admin key

- name: Generate kubectl csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/admin.csr
    privatekey_path: /etc/kubernetes/pki/admin.key
    common_name: "kubernetes-admin"
    organization_name: "system:masters"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - serverAuth
      - clientAuth
  changed_when: True
  notify: Clean admin csr

- name: Generate kubectl certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/admin.crt
    csr_path: /etc/kubernetes/pki/admin.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644
  notify: Clean admin crt

- name: Create admin kubeconfig
  ansible.builtin.template:
    src: admin.kubeconfig.j2
    dest: /etc/kubernetes/admin.kubeconfig
    mode: 0600
  notify: Clean admin kubeconfig

- name: Delete user kube directory
  ansible.builtin.file:
    name: ~/.kube
    state: absent

- name: Create user kube directory
  ansible.builtin.file:
    name: ~/.kube
    state: directory
    mode: 0755
  notify: Clean .kube

- name: Create User kubeconfig
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.kubeconfig
    dest: ~/.kube/config
    mode: "0644"
    remote_src: yes

- name: Install kubectl completion
  ansible.builtin.copy:
    src: kubectl.sh
    dest: /etc/bash_completion.d/kubectl
    owner: root
    group: root
  environment: "{{ proxy_env | default({'http_proxy': '', 'https_proxy': '', 'no_proxy': ''}) }}"
  ignore_errors: True