---
# tasks file for kubectl
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kubectl
  register: binary

- name: Create ssl directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ kubernetes.ssl.location }}'
    owner: root
    group: root
  with_items:
    - '/etc/ssl/{{ kubernetes.project }}/ca.crt'
    - '/etc/ssl/{{ kubernetes.project }}/admin.crt'
    - '/etc/ssl/{{ kubernetes.project }}/admin.key'
  register: certificate

- name: Create kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if kubernetes.ha is defined %}
      {% if inventory_hostname in groups['master'] %}
        {% if kubernetes.cloud.type == "local" and groups['master'] | length > 1 %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 8443 %}
        {% else %}
          {% if kubernetes.cloud.type == "local"  %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
          {% else %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 6443 %}
          {% endif %}
        {% endif %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% else %}
      {% if inventory_hostname in groups['master'] %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% endif %}

    kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --embed-certs=true \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config set-credentials {{ item.KUBE_USER }} \
      --client-certificate={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.key \
      --embed-certs=true \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'kubernetes-admin', KUBE_CERT: 'admin', KUBE_CONFIG: 'admin.conf'}
  # register: kubeconfig
  # when: certificate.changed or binary.changed

- name: Change file permissions
  file:
    path: /etc/kubernetes/admin.conf
    mode: '0644'

- name: Create user kube directory
  file: 
    name: ~/.kube/
    state: directory
    mode: '0755'

- name: Create kubeconfig
  copy: 
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    remote_src: yes
  # when: kubeconfig.changed

- name: Install kubectl completion
  copy: 
    src: kubectl.sh
    dest: /etc/bash_completion.d/kubectl
    owner: root
    group: root