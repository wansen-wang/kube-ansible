---
- name: Set OS dependent variables
  include_vars: '{{ DOWNLOAD_WAY }}.yml'

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kubectl
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: kubectl_pkg
  until: kubectl_pkg is succeeded
  retries: 5

- name: Create ssl directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'

- name: Distribution certificate
  copy: 
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: '{{ item.mode }}'
  with_items:
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.crt', dest: '{{ kubernetes.ssl.location }}/ca.crt', mode: 644 }
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.key', dest: '{{ kubernetes.ssl.location }}/ca.key', mode: 600 }

- name: Check admin certificate expired(30 days)
  community.crypto.openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/admin.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: admin_certificate_expired

- name: Create admin certificate
  shell: |
    openssl genrsa -out admin.key 2048 && \
    openssl req -new -key admin.key -subj "/CN=admin/O=system:masters" -out admin.csr && \
    openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out admin.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: admin_certificate
  when: admin_certificate_expired.failed

- name: Create admin kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if inventory_hostname in groups['master'] %}
      {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% else %}
      {% if kubernetes.ha.vip is defined %}
        {% if kubernetes.cloud.type == "local" %}
          {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 8443 %}
        {% else %}
           {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 6443 %}
        {% endif %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% endif %}

    /usr/local/bin/kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --embed-certs=true \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-credentials {{ item.KUBE_USER }} \
      --client-certificate={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.key \
      --embed-certs=true \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'admin', KUBE_CERT: 'admin', KUBE_CONFIG: 'admin.kubeconfig'}
  register: admin_kubeconfig
  when: admin_certificate.changed

- name: Change file permissions
  file:
    path: /etc/kubernetes/admin.kubeconfig
    mode: '0644'
  when: admin_kubeconfig.changed

- name: Delete user kube directory
  file: 
    name: ~/.kube
    state: absent
  when: admin_kubeconfig.changed

- name: Create user kube directory
  file: 
    name: ~/.kube
    state: directory
    mode: '0755'
  when: admin_kubeconfig.changed

- name: Create User kubeconfig
  copy: 
    src: /etc/kubernetes/admin.kubeconfig
    dest: ~/.kube/config
    remote_src: yes
  when: admin_kubeconfig.changed

- name: Install kubectl completion
  copy: 
    src: kubectl.sh
    dest: /etc/bash_completion.d/kubectl
    owner: root
    group: root