---
# tasks file for common
- name: Set OS dependent variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

- name: Set system time zone
  community.general.timezone:
    name: "{{ timezone }}"
  when: timezone is defined

- name: Install some applications
  include_tasks: "{{ ansible_os_family }}.yml"

- name: Install python applications
  pip:
    name: 
      - pyyaml
      - pyopenssl>=0.15
      - cryptography>=1.2.3
      - IPy
    extra_args: "-i https://pypi.tuna.tsinghua.edu.cn/simple"

- name: Set the Hostname
  ansible.builtin.hostname:
    name: "{{ hostname }}"
  when: hostname is defined

- name: Close firewalld
  ansible.builtin.systemd:
    name: "{{ svc_name }}"
    enabled: no
    state: stopped
  ignore_errors: True
  when: svc_name is defined

- name: Close SeLinux
  ansible.builtin.lineinfile:
    dest: /etc/selinux/config
    regexp: "^SELINUX="
    line: "SELINUX=disabled"
  when: ansible_facts['distribution'] == "CentOS"

- name: Load kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items: "{{ modprobe.params }}"
  when: modprobe.params is defined

- name: Write kernel modules to file
  ansible.builtin.lineinfile:
    path: "{{ modprobe.filename }}"
    line: "{{ item }}"
    create: yes
  with_items: "{{ modprobe.params }}"
  when: modprobe.params is defined

- name: Manage entries in sysctl.conf
  ansible.posix.sysctl:
    name: "{{ item.0 }}"
    value: "{{ item.1 }}"
    sysctl_file: "{{ sysctl.filename }}"
    reload: yes
    ignoreerrors: yes
  loop: "{{ sysctl.params | dictsort }}"
  when: sysctl.params is defined

- name: Remove swapfile from /etc/fstab
  ansible.builtin.lineinfile:
    dest: /etc/fstab
    regexp: "(^\\s*[^#].+swap)"
    line: '#\1'
    backrefs: yes

- name: Disable swap
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Settings limits
  community.general.pam_limits:
    domain: "{{ item.domain }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
    dest: /etc/security/limits.d/99-kubernetes.conf
  with_items: "{{ limits }}"

- name: Create data directory
  ansible.builtin.file:
    name: "{{ DataDir | default('/data') }}"
    state: directory
    mode: 0755
  when: DataDir is defined

- name: Create data primary partition
  community.general.filesystem:
    fstype: xfs
    dev: "{{ DataDevice }}"
    state: present
  when: DataDevice is defined

- name: Mount data root dir
  ansible.posix.mount:
    src: "{{ DataDevice }}"
    path: "{{ DataDir | default('/data') }}"
    fstype: xfs
    opts: defaults
    state: mounted
  when: DataDevice is defined