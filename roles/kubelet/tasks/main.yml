---
# tasks file for kubelet
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kubelet

- name: Create data directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - /etc/kubernetes/manifests
    - /var/lib/kubelet

- name: Create log directory
  file: 
    name: '{{ kubernetes.kubelet.log.logDir }}'
    state: directory
    mode: '0755'

- name: Install config file
  template: 
    src: kubelet-conf.yml.j2
    dest: /etc/kubernetes/kubelet-conf.yml

- name: Check bootstrap token
  stat: 
    path: /etc/kubernetes/bootstrap-token.yml
  register: bootstrap_token

- name: Register token id
  command: openssl rand -hex 3
  register: TOKEN_ID
  run_once: true
  when: not bootstrap_token.stat.exists

- name: Register token secret
  command: openssl rand -hex 8
  register: TOKEN_SECRET
  run_once: true
  when: not bootstrap_token.stat.exists

- name: Create bootstrap token --- part.1
  template: 
    src: bootstrap-token.yml.j2
    dest: /etc/kubernetes/bootstrap-token.yml
  when: not bootstrap_token.stat.exists

- name: Create bootstrap token --- part.2
  command: kubectl apply -f /etc/kubernetes/bootstrap-token.yml
  when: not bootstrap_token.stat.exists


- name: Check bootstrap kubeconfig
  stat: 
    path: /etc/kubernetes/bootstrap.kubeconfig
  register: bootstrap_kubeconfig

- name: Create bootstrap kubeconfig
  shell: |
    kubectl config set-cluster {{ kubernetes.name }} \
      --certificate-authority={{ ca.kubernetes.location }}/ca.crt \
      --server=https://{{ ansible_default_ipv4.address }}:6443 \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name }} \
      --cluster={{ kubernetes.name }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config set-credentials {{ item.KUBE_USER }} \
      --token={{ TOKEN_ID.stdout }}.{{ TOKEN_SECRET.stdout }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'kubelet-bootstrap', KUBE_CONFIG: 'bootstrap.kubeconfig' }
  when: not bootstrap_kubeconfig.stat.exists

- name: Install systemd file
  template: 
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service