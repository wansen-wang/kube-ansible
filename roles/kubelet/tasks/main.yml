---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kubelet
    # checksum: "sha256:{{ download_url }}.sha256"
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: kubelet_pkg
  until: kubelet_pkg is succeeded
  retries: 10

- name: Create certificate directory
  ansible.builtin.file:
    name: /etc/kubernetes/pki
    state: directory

- name: Create data directory
  ansible.builtin.file:
    name: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/kubernetes/manifests
    - /var/lib/kubelet
    - /var/lib/kubelet/pki

- name: Install config file
  ansible.builtin.template:
    src: kubelet.yaml.j2
    dest: /etc/kubernetes/kubelet.yaml

- name: Distribution certificate
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }

- name: Generate kubelet private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/kubelet.key
    size: 2048
    mode: 0600

- name: Generate kubelet csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/kubelet.csr
    privatekey_path: /etc/kubernetes/pki/kubelet.key
    organization_name: "system:nodes"
    common_name: "system:node:{{ ansible_hostname | lower }}"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  notify: Clean kubelet csr
    # subject_alt_name: 
    #   - "DNS:{{ ansible_hostname | lower }}"
    #   - "IP:{{ ansible_default_ipv4.address }}"
    #   - "IP:127.0.0.1"

- name: Generate kubelet certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/kubelet.crt
    csr_path: /etc/kubernetes/pki/kubelet.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644

- name: Create kubeconfig
  ansible.builtin.template:
    src: kubelet.kubeconfig.j2
    dest: /etc/kubernetes/kubelet.kubeconfig
    mode: 0600

- name: Install systemd file
  ansible.builtin.template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: Start the service
  ansible.builtin.systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: kubelet_service

- name: Health check
  uri:
    url: 'http://{% if kubelet.bindAddress | default("0.0.0.0") != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10248/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: 
    - "'ok' in this.content"
    - this.status == 200
  retries: 120
  delay: 1

- name: Waiting node on-line
  ansible.builtin.shell: /usr/local/bin/kubectl get node {% if nodename is defined %}{{ nodename | lower }}{% else %}{{ hostvars[inventory_hostname].ansible_hostname | lower }}{% endif %}
  register: waiting_for_node
  until: waiting_for_node.rc == 0 and (waiting_for_node.stdout.find("NotReady") != -1 or waiting_for_node.stdout.find("Ready") != -1)
  retries: 15
  delay: 5
  changed_when: false

- name: Install Check command
  ansible.builtin.template:
    src: check-node.sh.j2
    dest: /usr/local/bin/check-node.sh
    mode: 755

- name: Create check kubernetes node status in cron
  ansible.builtin.cron:
    name: "check kubernetes node status by kube-ansible"
    minute: "0"
    hour: "0"
    job: "/usr/local/bin/check-node.sh"