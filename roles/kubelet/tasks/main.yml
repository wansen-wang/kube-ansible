---
- name: Set OS dependent variables
  include_vars: '{{ DOWNLOAD_WAY }}.yml'

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kubelet
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: kubelet_pkg
  until: kubelet_pkg is succeeded # "msg": "Request failed
  retries: 5

- name: Create data directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'
    - /etc/kubernetes/manifests
    - /var/lib/kubelet

- name: Create log directory
  file: 
    name: '{{ kubernetes.kubelet.log.logDir }}'
    state: directory
    mode: '0755'

- name: Configuration logrotate
  template: 
    src: kubelet.logrotate.j2
    dest: /etc/logrotate.d/kubelet

- name: Install config file
  template: 
    src: kubelet.yaml.j2
    dest: /etc/kubernetes/kubelet.yaml

- name: Distribution certificate
  copy: 
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: '{{ item.mode }}'
  with_items:
    - { src: '/etc/ssl/{{ kubernetes.project }}/ca.crt', dest: '{{ kubernetes.ssl.location }}/ca.crt', mode: 644 }

- name: Check kubelet certificate expired(30 days)
  community.crypto.openssl_certificate:
    path: '{{ kubernetes.ssl.location }}/kubelet.crt'
    provider: assertonly
    valid_in: "2592000"
  ignore_errors: yes
  register: kubelet_certificate_expired

- name: Create kubelet certificate
  shell: |
    {% set hostname_override = ansible_hostname %}
    {% if nodename is defined %}
      {%- set hostname_override = nodename %}
    {% endif %}
    openssl genrsa -out kubelet.key 2048
    openssl req -new -key kubelet.key -subj "/CN=system:node:{{ hostname_override | lower }}/O=system:nodes" -out kubelet.csr
    openssl x509 -req -in kubelet.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out kubelet.crt -days {{ kubernetes.ssl.days | default(3652) }}
  args:
    chdir: '{{ kubernetes.ssl.location }}'
    executable: /bin/bash
  register: kubelet_certificate
  when: kubelet_certificate_expired.failed

- name: Create kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if inventory_hostname in groups['master'] %}
      {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% else %}
      {% if kubernetes.ha.vip is defined %}
        {% if kubernetes.cloud.type == "local" %}
          {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 8443 %}
        {% else %}
           {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 6443 %}
        {% endif %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% endif %}

    /usr/local/bin/kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --embed-certs=true \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-credentials {{ item.KUBE_USER }} \
      --embed-certs=true \
      --client-certificate={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.crt \
      --client-key={{ kubernetes.ssl.location }}/{{ item.KUBE_CERT }}.key \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-context {{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config use-context {{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'system:node:{{ ansible_hostname }}', KUBE_CERT: 'kubelet', KUBE_CONFIG: 'kubelet.kubeconfig' }
  register: kubelet_kubeconfig
  when: kubelet_certificate.changed

- name: Install systemd file
  template: 
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  register: kubelet_systemd

- name: Start the service
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: kubelet_service
  when: kubelet_pkg.changed or kubelet_certificate.changed or kubelet_kubeconfig.changed or kubelet_systemd.changed

- name: Health check
  uri: 
    url: 'http://{% if kubernetes.kubelet.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10248/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  when: kubelet_service.changed

- name: Waiting node on-line
  shell: /usr/local/bin/kubectl get node {% if nodename is defined %}{{ nodename | lower }}{% else %}{{ hostvars[inventory_hostname].ansible_hostname | lower }}{% endif %}
  register: waiting_for_node
  until: waiting_for_node.rc == 0 and (waiting_for_node.stdout.find("NotReady") != -1 or waiting_for_node.stdout.find("Ready") != -1)
  retries: 15
  delay: 5
  changed_when: false
  when: kubelet_service.changed