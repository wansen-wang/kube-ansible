---
# tasks file for kubelet
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kubelet

- name: Create data directory
  file: 
    name: '{{ item }}'
    state: directory
    mode: '0755'
  with_items:
    - '{{ kubernetes.ssl.location }}'
    - /etc/kubernetes/manifests
    - /var/lib/kubelet

- name: Create log directory
  file: 
    name: '{{ kubernetes.kubelet.log.logDir }}'
    state: directory
    mode: '0755'

- name: Install config file
  template: 
    src: kubelet-conf.yml.j2
    dest: /etc/kubernetes/kubelet-conf.yml

- name: Create kube endpoints
  template: 
    src: '{{ item.src }}'
    dest: '/etc/kubernetes/manifests/{{ item.dest }}'
  with_items:
    - { src: 'kube-controller-manager.ep.yaml.j2', dest: 'kube-controller-manager.ep.yaml' }
    - { src: 'kube-controller-manager.svc.yaml.j2', dest: 'kube-controller-manager.svc.yaml' }
    - { src: 'kube-scheduler.ep.yaml.j2', dest: 'kube-scheduler.ep.yaml' }
    - { src: 'kube-scheduler.svc.yaml.j2', dest: 'kube-scheduler.svc.yaml' }
  when: inventory_hostname in groups['master']

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ kubernetes.ssl.location }}/'
    owner: root
    group: root
  with_items:
    - '/etc/ssl/{{ kubernetes.project }}/ca.crt'

- name: Check bootstrap token
  command: /usr/local/bin/kubectl get secret -n kube-system -l ansible=true --output="jsonpath={.items[0].metadata.name}"
  register: bootstrap_token
  ignore_errors: True
  run_once: true

- name: Register token id
  shell: |
    {% if bootstrap_token.rc == 0 %}
    /usr/local/bin/kubectl get secret -n kube-system -l ansible=true --output="jsonpath={.items[0].data.token-id}"
    {% else %}
      {% if inventory_hostname in groups['master'] %}
      openssl rand -hex 3 | base64
      {% else %}
      /usr/local/bin/kubectl get secret -n kube-system -l ansible=true --output="jsonpath={.items[0].data.token-id}"
      {% endif %}
    {% endif %}
  register: TOKEN_ID
  run_once: true

- name: Register token secret
  shell: |
    {% if bootstrap_token.rc == 0 %}
      /usr/local/bin/kubectl get secret -n kube-system -l ansible=true --output="jsonpath={.items[0].data.token-secret}"
    {% else %}
      {% if inventory_hostname in groups['master'] %}
        openssl rand -hex 8 | base64
      {% else %}
        /usr/local/bin/kubectl get secret -n kube-system -l ansible=true --output="jsonpath={.items[0].data.token-secret}"
      {% endif %}
    {% endif %}
  register: TOKEN_SECRET
  run_once: true

- name: Create bootstrap token
  shell: |
    /usr/local/bin/kubectl -n kube-system create secret generic bootstrap-token-{{ TOKEN_ID.stdout | b64decode | trim  }} \
    --type 'bootstrap.kubernetes.io/token' \
    --from-literal description="cluster bootstrap token" \
    --from-literal token-id={{ TOKEN_ID.stdout | b64decode | trim }} \
    --from-literal token-secret={{ TOKEN_SECRET.stdout | b64decode | trim }} \
    --from-literal usage-bootstrap-authentication=true \
    --from-literal usage-bootstrap-signing=true

    /usr/local/bin/kubectl label secrets -n kube-system bootstrap-token-{{ TOKEN_ID.stdout | b64decode | trim }} ansible=true
  run_once: true
  when: bootstrap_token.rc != 0 and inventory_hostname in groups['master']

- name: debug TOKEN_ID
  debug: 
    msg: '{{TOKEN_ID}}'
- name: debug TOKEN_SECRET
  debug: 
    msg: '{{TOKEN_SECRET}}'

- name: Create bootstrap kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if kubernetes.ha is defined %}
      {% if inventory_hostname in groups['master'] %}
        {% if kubernetes.cloud.type == "local" and groups['master'] | length > 1 %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 8443 %}
        {% else %}
          {% if kubernetes.cloud.type == "local"  %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
          {% else %}
            {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = kubernetes.ha.vip, 6443 %}
          {% endif %}
        {% endif %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% else %}
      {% if inventory_hostname in groups['master'] %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
      {% else %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% endif %}
    {% endif %}

    /usr/local/bin/kubectl config set-cluster {{ kubernetes.name | default("kubernetes") }} \
      --embed-certs=true \
      --certificate-authority={{ kubernetes.ssl.location }}/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} \
      --cluster={{ kubernetes.name | default("kubernetes") }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}

    /usr/local/bin/kubectl config set-credentials {{ item.KUBE_USER }} \
      --token={{ TOKEN_ID.stdout | b64decode | trim }}.{{ TOKEN_SECRET.stdout | b64decode | trim }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONssFIG }}

    /usr/local/bin/kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name | default("kubernetes") }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }}
  with_items:
    - { KUBE_USER: 'kubelet-bootstrap', KUBE_CONFIG: 'bootstrap.kubeconfig' }

- name: Create auto-approve --- part.1
  copy: 
    src: '{{ item }}'
    dest: '/etc/kubernetes/{{ item }}'
  run_once: true
  with_items:
    - auto-approve-csrs-for-group.yml
    - auto-approve-renewals-for-nodes.yml
    - create-csrs-for-bootstrapping.yml
  when: inventory_hostname in groups['master']

- name: Create auto-approve --- part.2
  command: '/usr/local/bin/kubectl apply -f /etc/kubernetes/{{ item }}'
  run_once: true
  with_items:
    - auto-approve-csrs-for-group.yml
    - auto-approve-renewals-for-nodes.yml
    - create-csrs-for-bootstrapping.yml
  when: inventory_hostname in groups['master']

- name: Install systemd file
  template: 
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: Clean old tls file --- part.1
  find:
    paths: '{{ kubernetes.ssl.location }}'
    patterns: 
      - "kubelet*"
    use_regex: yes
    recurse: yes
  register: kubelet_files

- name: Clean old tls file --- part.2
  file:
    path: '{{ item.path }}'
    state: absent
  with_items: '{{ kubelet_files.files }}'

- name: Start the service
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Health check
  uri: 
    url: 'http://{% if kubernetes.kubelet.bind != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10248/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  connection: local

- name: Waiting node on-line
  shell: /usr/local/bin/kubectl get node {% if nodename is defined %}{{ nodename | lower }}{% else %}{{ hostvars[inventory_hostname].hostname | lower }}{% endif %}
  register: waiting_for_node
  until: waiting_for_node.rc == 0 and (waiting_for_node.stdout.find("NotReady") != -1 or waiting_for_node.stdout.find("Ready") != -1)
  retries: 15
  delay: 5
  changed_when: false

- name: Clean auto-approve yml file
  file:
    path: '/etc/kubernetes/{{ item }}'
    state: absent
  run_once: true
  with_items:
    - auto-approve-csrs-for-group.yml
    - auto-approve-renewals-for-nodes.yml
    - create-csrs-for-bootstrapping.yml
  when: inventory_hostname in groups['master']