---
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY }}.yml"

- name: Download binary
  get_url:
    url: "{{ download_url }}"
    dest: /usr/local/bin/kubelet
    # checksum: "sha256:{{ download_url }}.sha256"
    force: true
    mode: 0755
    owner: root
    group: root
    url_password: "{{ NEXUS_HTTP_USERNAME }}"
    url_username: "{{ NEXUS_HTTP_PASSWORD }}"
    timeout: 3
  register: kubelet_pkg
  until: kubelet_pkg is succeeded
  retries: 5

- name: Create certificate directory
  file:
    name: /etc/kubernetes/pki
    state: directory

- name: Create data directory
  file:
    name: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/kubernetes/manifests
    - /var/lib/kubelet
    - /var/lib/kubelet/pki

- name: Install config file
  template:
    src: kubelet.yaml.j2
    dest: /etc/kubernetes/kubelet.yaml

- name: Distribution certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - {
        src: "/etc/ssl/kubernetes/ca.crt",
        dest: "/etc/kubernetes/pki/ca.crt",
        mode: 644,
      }

# - name: Check kubelet certificate expired(30 days)
#   community.crypto.openssl_certificate:
#     path: "/etc/kubernetes/pki/kubelet.crt"
#     provider: assertonly
#     valid_in: "2592000"
#   ignore_errors: yes
#   register: kubelet_certificate_expired

# - name: Create kubelet certificate
#   shell: |
#     {% set hostname_override = ansible_hostname %}
#     {% if nodename is defined %}
#       {%- set hostname_override = nodename %}
#     {% endif %}
#     openssl genrsa -out kubelet.key 2048
#     openssl req -new -key kubelet.key -subj "/CN=system:node:{{ hostname_override | lower }}/O=system:nodes" -out kubelet.csr
#     openssl x509 -req -in kubelet.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req_client -extfile openssl.cnf -out kubelet.crt -days {{ kubernetes.ssl.days | default(3652) }}
#   args:
#     chdir: "/etc/kubernetes/pki"
#     executable: /bin/bash
#   register: kubelet_certificate
#   when: kubelet_certificate_expired.failed
- name: Generate kubelet private key
  community.crypto.openssl_privatekey:
    path: /etc/kubernetes/pki/kubelet.key
    size: 2048
    mode: 0600

- name: Generate kubelet csr
  community.crypto.openssl_csr:
    path: /etc/kubernetes/pki/kubelet.csr
    privatekey_path: /etc/kubernetes/pki/kubelet.key
    organization_name: "system:nodes"
    common_name: "system:node:{{ ansible_hostname | lower }}"
    basic_constraints_critical: yes
    basic_constraints:
      - "CA:FALSE"
    key_usage_critical: yes
    key_usage:
      - digitalSignature
      - keyEncipherment
    extended_key_usage:
      - clientAuth
  #   subject_alt_name: "{{ item.value | list }}"
  # with_dict: 
  #   ips: 
  #     - "DNS:{{ ansible_hostname | lower }}"
  #     - "IP:{{ ansible_default_ipv4.address }}"
  #     - "IP:127.0.0.1"

- name: Generate kubelet certificate
  community.crypto.x509_certificate:
    path: /etc/kubernetes/pki/kubelet.crt
    csr_path: /etc/kubernetes/pki/kubelet.csr
    ownca_path: /etc/kubernetes/pki/ca.crt
    ownca_privatekey_path: /etc/kubernetes/pki/ca.key
    provider: ownca
    mode: 0644

- name: Create kubeconfig
  shell: |
    {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% if inventory_hostname in groups['master'] %}
      {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ansible_default_ipv4.address, 6443 %}
    {% else %}
      {% if ha.type == "none" %}
        {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = hostvars[groups['master'][0]].inventory_hostname, 6443 %}
      {% else %}
        {% if ha.type == "slb" %}
          {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ha.vip, 8443 %}
        {% else %}
          {% set KUBE_APISERVER_ADDR, KUBE_APISERVER_PORT = ha.vip, 6443 %}
        {% endif %}
      {% endif %}
    {% endif %}

    /usr/local/bin/kubectl config set-cluster kubernetes \
      --embed-certs=true \
      --certificate-authority=/etc/kubernetes/pki/ca.crt \
      --server=https://{{ KUBE_APISERVER_ADDR }}:{{ KUBE_APISERVER_PORT }} \
      --kubeconfig=/etc/kubernetes/kubelet.kubeconfig

    /usr/local/bin/kubectl config set-credentials system:node:{{ ansible_hostname | lower }} \
      --embed-certs=true \
      --client-certificate=/etc/kubernetes/pki/kubelet.crt \
      --client-key=/etc/kubernetes/pki/kubelet.key \
      --kubeconfig=/etc/kubernetes/kubelet.kubeconfig

    /usr/local/bin/kubectl config set-context kubernetes \
      --cluster=kubernetes \
      --user=system:node:{{ ansible_hostname | lower }} \
      --kubeconfig=/etc/kubernetes/kubelet.kubeconfig

    /usr/local/bin/kubectl config use-context kubernetes --kubeconfig=/etc/kubernetes/kubelet.kubeconfig
  register: kubelet_kubeconfig

- name: Install systemd file
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  register: kubelet_systemd

- name: Start the service
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon_reload: yes
  register: kubelet_service
  when: kubelet_pkg.changed or kubelet_systemd.changed

- name: Health check
  uri:
    url: 'http://{% if kubelet.bindAddress != "0.0.0.0" %}127.0.0.1{% else %}{{ ansible_default_ipv4.address }}{% endif %}:10248/healthz'
    validate_certs: no
    return_content: yes
  register: this
  until: "'ok' in this.content"
  retries: 30
  delay: 5
  when: kubelet_service.changed

- name: Waiting node on-line
  shell: /usr/local/bin/kubectl get node {% if nodename is defined %}{{ nodename | lower }}{% else %}{{ hostvars[inventory_hostname].ansible_hostname | lower }}{% endif %}
  register: waiting_for_node
  until: waiting_for_node.rc == 0 and (waiting_for_node.stdout.find("NotReady") != -1 or waiting_for_node.stdout.find("Ready") != -1)
  retries: 15
  delay: 5
  changed_when: false
  when: kubelet_service.changed
