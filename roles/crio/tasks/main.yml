---
# tasks file for crio
- name: Set OS dependent variables
  include_vars: "{{ DOWNLOAD_WAY | default('official') }}.yml"

- name: Download package
  get_url:
    url: "{{ download_url }}"
    dest: "/usr/local/src/crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}.tar.gz"
    force: true
    mode: 0644
    owner: root
    group: root
    url_username: "{{ NEXUS_USERNAME | default('') }}"
    url_password: "{{ NEXUS_PASSWORD | default('') }}"
    timeout: 3
  register: crio_pkg
  until: crio_pkg is succeeded
  retries: 10
  environment: "{{ proxy_env | default({'http_proxy': '', 'https_proxy': '', 'no_proxy': ''}) }}"

- name: Extract package
  ansible.builtin.unarchive:
    src: "/usr/local/src/crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}.tar.gz"
    dest: /usr/local/bin
    owner: root
    group: root
    remote_src: yes
    extra_opts:
      - --strip-components=2
    exclude:
      - "crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}/etc"
      - "crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}/completions"
      - "crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}/man"
      - "crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}/cni-plugins"
      - "crio-v{{ KUBE_VERSION | component_version | community.general.json_query('runtime.crio') }}/contrib"

- name: Create data directory
  ansible.builtin.file:
    name: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/crio
    - "{{ crio.datadir | default('/var/lib/containers/storage') }}"

- name: Configuration file
  ansible.builtin.template:
    src: crio.conf.j2
    dest: /etc/crio/crio.conf
  register: crio_cfg

- name: Create a crio primary partition
  community.general.filesystem:
    fstype: xfs
    dev: "{{ crio.device }}"
    state: present
  when: crio.device is defined

- name: Mount crio root dir
  ansible.posix.mount:
    src: "{{ crio.device }}"
    path: "{{ crio.datadir | default('/var/lib/containers/storage') }}"
    fstype: xfs
    opts: defaults,pquota
    state: mounted
  when: crio.device is defined

- name: Install systemd file
  ansible.builtin.template:
    src: crio.service.j2
    dest: /etc/systemd/system/crio.service
  register: crio_systemd

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Start the service
  ansible.builtin.systemd:
    name: crio
    state: restarted
    enabled: yes
    daemon_reload: yes
    masked: yes
  when: crio_pkg.changed or 
        crio_cfg.changed or 
        crio_systemd.changed or 
        ansible_facts.services['crio.service']['state'] != 'running'