# docker config
docker:
  datadir: /var/lib/docker
  # auto create dockr primary partition
  # device: /dev/sdb
  # Convert the json format to yaml
  daemon:
    exec-opts:
      - "native.cgroupdriver=systemd"
    registry-mirrors:
      - "https://i3jtbyvy.mirror.aliyuncs.com"
    storage-driver: "overlay2"
    storage-opts:
      - "overlay2.override_kernel_check=true"
    log-driver: "json-file"
    log-opts:
      max-size: "100m"
      max-file: "5"
    max-concurrent-downloads: 20
    max-concurrent-uploads: 10
    userland-proxy: false
    experimental: false
    icc: false
    debug: false
    default-ulimits:
      nofile:
        Name: nofile
        Hard: 655360
        Soft: 655360

# containerd config
containerd:
  datadir: /var/lib/containerd
  # auto create containerd primary partition
  # device: /dev/sdb
  daemon: -|
    version = 2
    root = "{{ containerd.datadir | default('/var/lib/containerd') }}"
    state = "/run/containerd"
    disabled_plugins = []
    imports = []
    oom_score = -999
    plugin_dir = ""
    required_plugins = ["io.containerd.grpc.v1.cri"]

    [cgroup]
      path = ""

    [debug]
      address = "/run/containerd/debug.sock"
      level = "info"
      format = ""
      gid = 0
      uid = 0

    [grpc]
      address = "/run/containerd/containerd.sock"
      gid = 0
      max_recv_message_size = 16777216
      max_send_message_size = 16777216
      tcp_address = ""
      tcp_tls_cert = ""
      tcp_tls_key = ""
      uid = 0

    [metrics]
      address = ""
      grpc_histogram = false

    [timeouts]
      "io.containerd.timeout.shim.cleanup" = "5s"
      "io.containerd.timeout.shim.load" = "5s"
      "io.containerd.timeout.shim.shutdown" = "3s"
      "io.containerd.timeout.task.state" = "2s"

    [plugins]

      [plugins."io.containerd.gc.v1.scheduler"]
        deletion_threshold = 0
        mutation_threshold = 100
        pause_threshold = 0.02
        schedule_delay = "0s"
        startup_delay = "100ms"

      [plugins."io.containerd.grpc.v1.cri"]
        disable_apparmor = false
        disable_cgroup = false
        disable_hugetlb_controller = true
        disable_proc_mount = false
        disable_tcp_service = true
        enable_selinux = false
        enable_tls_streaming = false
        ignore_image_defined_volumes = true
        max_concurrent_downloads = 3
        max_container_log_line_size = 16384
        netns_mounts_under_state_dir = false
        restrict_oom_score_adj = false
        sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.5"
        selinux_category_range = 1024
        stats_collect_period = 10
        stream_idle_timeout = "4h0m0s"
        stream_server_address = "127.0.0.1"
        stream_server_port = "0"
        systemd_cgroup = false
        tolerate_missing_hugetlb_controller = true
        unset_seccomp_profile = ""

        [plugins."io.containerd.grpc.v1.cri".cni]
          bin_dir = "/opt/cni/bin"
          conf_dir = "/etc/cni/net.d"
          conf_template = ""
          max_conf_num = 1

        [plugins."io.containerd.grpc.v1.cri".containerd]
          default_runtime_name = "runc"
          disable_snapshot_annotations = true
          discard_unpacked_layers = false
          no_pivot = false
          snapshotter = "overlayfs"

          [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
            base_runtime_spec = ""
            container_annotations = []
            pod_annotations = []
            privileged_without_host_devices = false
            runtime_engine = "/usr/local/bin/runc"
            runtime_root = ""
            runtime_type = "io.containerd.runtime.v1.linux"

            [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              base_runtime_spec = ""
              container_annotations = []
              pod_annotations = []
              privileged_without_host_devices = false
              runtime_engine = ""
              runtime_root = ""
              runtime_type = "io.containerd.runc.v2"

              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                BinaryName = ""
                CriuImagePath = ""
                CriuPath = ""
                CriuWorkPath = ""
                IoGid = 0
                IoUid = 0
                NoNewKeyring = false
                NoPivotRoot = false
                Root = ""
                ShimCgroup = ""
                SystemdCgroup = false

          [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
            base_runtime_spec = ""
            container_annotations = []
            pod_annotations = []
            privileged_without_host_devices = false
            runtime_engine = ""
            runtime_root = ""
            runtime_type = ""

            [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

        [plugins."io.containerd.grpc.v1.cri".image_decryption]
          key_model = "node"

        [plugins."io.containerd.grpc.v1.cri".registry]
          config_path = ""

          [plugins."io.containerd.grpc.v1.cri".registry.auths]

          [plugins."io.containerd.grpc.v1.cri".registry.configs]

          [plugins."io.containerd.grpc.v1.cri".registry.headers]

          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
              endpoint = ["https://registry-1.docker.io", "https://i3jtbyvy.mirror.aliyuncs.com" ]

        [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
          tls_cert_file = ""
          tls_key_file = ""

      [plugins."io.containerd.internal.v1.opt"]
        path = "/opt/containerd"

      [plugins."io.containerd.internal.v1.restart"]
        interval = "10s"

      [plugins."io.containerd.metadata.v1.bolt"]
        content_sharing_policy = "shared"

      [plugins."io.containerd.monitor.v1.cgroups"]
        no_prometheus = false

      [plugins."io.containerd.runtime.v1.linux"]
        no_shim = false
        runtime = "runc"
        runtime_root = ""
        shim = "containerd-shim"
        shim_debug = false

      [plugins."io.containerd.runtime.v2.task"]
        platforms = ["linux/amd64"]

      [plugins."io.containerd.service.v1.diff-service"]
        default = ["walking"]

      [plugins."io.containerd.snapshotter.v1.aufs"]
        root_path = ""

      [plugins."io.containerd.snapshotter.v1.btrfs"]
        root_path = ""

      [plugins."io.containerd.snapshotter.v1.devmapper"]
        async_remove = false
        base_image_size = ""
        pool_name = ""
        root_path = ""

      [plugins."io.containerd.snapshotter.v1.native"]
        root_path = ""

      [plugins."io.containerd.snapshotter.v1.overlayfs"]
        root_path = ""

      [plugins."io.containerd.snapshotter.v1.zfs"]
        root_path = ""

    [proxy_plugins]

    [stream_processors]

      [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
        accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
        args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
        env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
        path = "ctd-decoder"
        returns = "application/vnd.oci.image.layer.v1.tar"

      [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
        accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
        args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
        env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
        path = "ctd-decoder"
        returns = "application/vnd.oci.image.layer.v1.tar+gzip"

    [ttrpc]
      address = ""
      gid = 0
      uid = 0

# etcd config
etcd:
  datadir: /var/lib/etcd
  # auto create etcd primary partition
  # device: /dev/sdc
  backupDir: /tmp
  extraArgs:
    - "--auto-compaction-retention=1h"
    - "--max-request-bytes=33554432"
    - "--quota-backend-bytes=8589934592"
    - "--enable-v2=false"
    - "--snapshot-count=10000"

# ha config
# none not use lb for apiserver
# slb is software load balancing, will install harpoxy and keepalived on master node
# clb is cloud load balancing, will use cloud load balancing
# ha:
#   type: slb
#   vip: 172.16.6.10
#   mask: 16

# loadBalancing is 4 layer forwarding to ingress by haproxy, only used in slb
# loadBalancing:
#   http:
#     src: 80
#     dest: 30001
#   https:
#     src: 443
#     dest: 30002

# kubernetes network config
networking:
  dnsDomain: cluster.local
  serviceSubnet: 10.96.0.0/12
  podSubnet: 10.244.0.0/16
  # SvcIP: 10.96.0.1
  # DNSIP: 10.96.0.2

# kubernetes cloud provider config
# cloudProvider:
#   provider: azure
#   config: |
#     {
#       "cloud": "AzurePublicCloud"
#       "tenantId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
#       "subscriptionId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
#       "aadClientId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
#       "aadClientSecret": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
#       "resourceGroup": "<Resource Group of the K8s cluster>"
#       "location": "<Region of the K8s cluster>"
#       "subnetName": "<Subnet Name where the cluster is running>"
#       "securityGroupName": "<network security group assigned to the subnet>"
#       "routeTableName": "<route table assiged to the subnet>"
#       "vnetName": "<virtual network of the cluster>"
#       "vnetResourceGroup": "<Resource Group of the K8s cluster>"
#       "cloudProviderBackoff": true,
#       "cloudProviderBackoffRetries": 6,
#       "cloudProviderBackoffExponent": 1.5,
#       "cloudProviderBackoffDuration": 5,
#       "cloudProviderBackoffJitter": 1,
#       "cloudProviderRatelimit": true,
#       "cloudProviderRateLimitQPS": 3,
#       "cloudProviderRateLimitBucket": 10,
#       "useManagedIdentityExtension": false,
#       "useInstanceMetadata": true
#     }

# kube-apiserver config
apiServer:
  bindAddress: "0.0.0.0"
  encryption: Tsg7sO4Ki/W3s9bfwGfTi8ECcp+/3uDedQMq6rLQTIY= # head -c 32 /dev/urandom | base64
  certSANs:
    - "DNS:*.kubernetes.local"
  admissionControlConfigFile:
    - name: EventRateLimit
      path: EventRateLimit.yaml
      configuration:
        apiVersion: eventratelimit.admission.k8s.io/v1alpha1
        kind: Configuration
        limits:
          - type: Namespace
            qps: 50
            burst: 100
            cacheSize: 2000
  extraArgs:
    - "--event-ttl=4h"
    - "--anonymous-auth=false"
    - "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"
    - "--service-node-port-range=30000-32767"
    - "--runtime-config=api/all=true"
    - "--authorization-mode=Node,RBAC"
    - "--profiling=false"
    - "--enable-admission-plugins=AlwaysPullImages,ServiceAccount,NamespaceLifecycle,NodeRestriction,LimitRanger,PersistentVolumeClaimResize,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority"
    - "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
    - "--feature-gates=TTLAfterFinished=true"
    - "--logging-format=json"
  log:
    level: 1

# kube-controller-manager config
controllerManager:
  bindAddress: "0.0.0.0"
  extraArgs:
    - "--experimental-cluster-signing-duration=8760h"
    - "--terminated-pod-gc-threshold=12500"
    - "--node-monitor-period=5s"
    - "--node-monitor-grace-period=40s"
    - "--pod-eviction-timeout=5m0s"
    - "--profiling=false"
    - "--port=0"
    - "--feature-gates=TTLAfterFinished=true"
    - "--logging-format=json"
  log:
    level: 1

# kube-scheduler config
scheduler:
  bindAddress: "0.0.0.0"
  extraArgs:
    - "--profiling=false"
    - "--port=0"
    - "--feature-gates=TTLAfterFinished=true"
    - "--logging-format=json"
  log:
    level: 1

# kubelet config
kubelet:
  bindAddress: "0.0.0.0"
  extraArgs:
    - "--pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.5"
    - "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
    - "--allowed-unsafe-sysctls=net.*"
  log:
    level: 1

# kube-proxy config
proxy:
  bindAddress: "0.0.0.0"
  extraArgs:
    - "--mode=ipvs"
  log:
    level: 1

# app not support all kubernetes version, please confirm apiVersion on manifests.
apps:
  location: /etc/kubernetes/apps
  files:
    - {
        url: "https://raw.githubusercontent.com/buxiaomo/kubernetes-sigs/main/metrics.yaml",
        name: metrics.yaml,
      }
    - {
        url: "https://raw.githubusercontent.com/buxiaomo/kubernetes-sigs/main/coredns.yaml",
        name: coredns.yaml,
      }
    # - {
    #     url: "https://raw.githubusercontent.com/buxiaomo/kubernetes-sigs/main/traefik.yaml",
    #     name: traefik.yaml,
    #   }
    # - {
    #     url: "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml",
    #     name: flannel.yaml,
    #   }
    # - {
    #     url: "https://raw.githubusercontent.com/buxiaomo/kubernetes-sigs/main/cilium.yaml",
    #     name: cilium.yaml,
    #   }
    # - {
    #     url: "https://docs.projectcalico.org/manifests/calico.yaml",
    #     name: calico.yaml,
    #   }
    # - {
    #     url: "https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml",
    #     name: cert-manager.yaml,
    #   }